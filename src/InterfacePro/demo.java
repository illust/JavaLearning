package InterfacePro;

/**
 * Created by Sven on 2018/2/7.
 */

/**
 * 接口：
 *    - 接口中可以规定方法的原型：方法名，参数列表以及返回类型，但不规定方法主体；
 *    - 也可以包含基本数据类型的数据成员，但它们都默认为static和final。
 *  使用接口的作用：
 *   - 继承多个设计
 *   - 建立类和类之间的协议：在看起来不相干的类之间，按照它们的共同行为，为它们设计一个统一的接口
 *  接口的语法：
 *    - 声明格式：
 *          [接口修饰符] interface 接口名称 [extends 父接口名]{
 *              ...// 方法的原型声明或静态常量
 *          }
 *     - 由于接口体内的数据成员是静态常量，所以一定要有初值，且此值将不能再更改，可以省略final关键字
 *     - 接口中的方法必须是“抽象方法”，不能有方法体，可以省略public及abstract关键字
 *   注：跟抽象类一样，接口也不能直接产生实例，即不能new一个接口类型的实例
 *  ==============================================================================================
 *  实现接口：
 *    利用接口设计类的过程，称为接口的实现，使用implements关键字，语法如下：
 *    public class 类名称 implements 接口名称{
 *        // 在类体中实现接口的方法
 *        // 本类声明的更多变量和方法
 *    }
 *    注意：
 *     - 必须实现接口中的所有方法
 *     - 来自接口的方法必须声明成public
 *  ===============================================================================================
 *  接口的多继承：
 *
 *  ===============================================================================================
 *  接口的扩展：
 *   - 实现一个接口的类也必须实现其超接口
 *   - 接口扩展的语法：
 *     interface 子接口的名称 extends 超接口的名称1，超接口的名称2，...
 *     {
 *         ... ...
 *     }
 */
public class demo {
}
